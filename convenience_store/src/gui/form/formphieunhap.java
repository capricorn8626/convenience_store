/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package gui.form;
import bus.busphieunhap;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import com.formdev.flatlaf.FlatClientProperties;
import com.formdev.flatlaf.extras.FlatSVGIcon;
import bus.busphieunhap;
import bus.busctphieunhap;
import bus.busnhanvien;
import dto.dtophieunhap;
import dto.dtophieunhap;
import dto.dtoctphieunhap;
import dto.dtophieunhap;
import dto.dtonhanvien;


import net.miginfocom.swing.MigLayout;

import gui.table.TableHeaderAlignment;

import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.time.Year;
import java.util.ArrayList;
import java.util.Calendar;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
/**
 *
 * @author PHUONG ANH
 */
public class formphieunhap extends javax.swing.JPanel {
    private JTable generalTable;
    private busphieunhap buspn = new busphieunhap();
    private busctphieunhap busctpn = new busctphieunhap();
    private JButton btnDetail;
    private int manv;
    //private busnhanvien busnv = new busnhanvien();
    /**
     * Creates new form phieunhap
     */
    public formphieunhap(int manv) {
        this.manv = manv;
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    private void init() {
        setLayout(new MigLayout("fillx,wrap,insets 7 15 7 15", "[fill]", "[][fill,grow]"));
        add(createTab(), "grow, gapx 7 7"); // Allow the tab component to grow
    }

    private Component createTab() {
        JTabbedPane tabb = new JTabbedPane();
        tabb.putClientProperty(FlatClientProperties.STYLE, "tabType:card");
        tabb.addTab("Danh sách phiếu nhập", createBorder(createGeneralTable()));
        tabb.addTab("Nhập hàng", createBorder(nhapHangTab()));
        tabb.setPreferredSize(new Dimension(1070, 700)); // Set preferred size of the tabbed pane
        return tabb;
    }
    private Component createBorder(Component component) {
        JPanel panel = new JPanel(new MigLayout("fill,insets 7 0 7 0", "[fill]", "[fill]"));
        panel.add(component);
        return panel;
    }

    private Component nhapHangTab() {
    JPanel panel = new JPanel();
    panel.setLayout(new MigLayout("fillx, wrap, insets 5 35 5 35"));

    // Add header at the top
    panel.add(createNhapHangHeader(), "span, growx, wrap");

    // Add middle left and right panels
    panel.add(createMidLeftPanel(), "cell 0 1, grow");
    panel.add(createMidRightPanel(), "cell 1 1, grow");

    // Add detail table at the bottom
    panel.add(createDetailTable(), "span, growx, dock south");

    return panel;
    }


    private JPanel createMidLeftPanel() {
        JPanel midLeft = new JPanel(new MigLayout("fillx, wrap 2", "[fill][fill]"));

        // Middle Left: Input fields
        JTextField txtNVid = new JTextField();
        txtNVid.setEditable(false);
        JTextField txtNVname = new JTextField();
        txtNVname.setEditable(false);

        JTextField txtNCCid = new JTextField();
        txtNCCid.setEditable(false);

        JComboBox cbNCCname = new JComboBox();

        JTextField txtTotal = new JTextField();
        txtTotal.setEditable(false);

        JTextArea txtNote = new JTextArea();
        txtNote.setWrapStyleWord(true);
        txtNote.setLineWrap(true);
        JScrollPane scroll = new JScrollPane(txtNote);

        dtophieunhap pn = new dtophieunhap();
        int nvid = pn.getMaNhanVien();
        txtNVid.setText(String.valueOf(nvid));

        // Add components to midLeft section
        midLeft.add(new JLabel("Nhân viên nhập hàng"), "gapy 5 0");
        midLeft.add(txtNVid, "split 2, growx, wmin 100"); // Half width
        midLeft.add(txtNVname, "growx, wrap");

        midLeft.add(new JLabel("Chọn nhà cung cấp"), "gapy 5 0");
        midLeft.add(txtNCCid, "split 2, growx, wmin 100"); // Half width
        midLeft.add(cbNCCname, "growx, wrap");

        midLeft.add(new JLabel("Ghi chú"), "gapy 5 0");
        midLeft.add(scroll, "growx, hmin 35, hmax 50, wrap");

        midLeft.add(new JLabel("Tổng tiền"), "gapy 5 0");
        midLeft.add(txtTotal, "growx, wrap");

        return midLeft;
    }

    private JPanel createMidRightPanel() {
    JPanel midRight = new JPanel(new MigLayout("fillx, wrap"));

    // Add the additional table with growth constraints
    midRight.add(createAdditionalTable(), "growx, growy, wrap");

    // Create buttons
    JButton btnAdd = new JButton("Add");
    JButton btnDelete = new JButton("Delete");

    // Add buttons to the bottom right
    midRight.add(btnAdd, "tag right, split 2, sg 1");
    midRight.add(btnDelete, "sg 1");

    return midRight;
}

    private JScrollPane createAdditionalTable() {
    // Creating a sample table with some data for demonstration
    String[] columnNames = {"Column 1", "Column 2", "Column 3"};
    Object[][] data = {
        {"Row1-Col1", "Row1-Col2", "Row1-Col3"},
        {"Row2-Col1", "Row2-Col2", "Row2-Col3"},
        {"Row3-Col1", "Row3-Col2", "Row3-Col3"}
    };
    
    JTable additionalTable = new JTable(data, columnNames);
    additionalTable.setFillsViewportHeight(true);

    // Put the table in a scroll pane
    JScrollPane scrollPane = new JScrollPane(additionalTable);
    scrollPane.setPreferredSize(new Dimension(200, 100)); // Adjust size as needed

    return scrollPane;
}

    private Component nhapHangTable() {
        Object columns[] = new Object[]{"SELECT", "Mã SP", "Tên SP", "", "SALARY", "POSITION", "DESCRIPTION"};
        DefaultTableModel model = new DefaultTableModel(columns, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }

        };
        JTable table = new JTable(model);
        JScrollPane scrollPane = new JScrollPane(table);
        scrollPane.setBorder(BorderFactory.createEmptyBorder());

        // alignment table header
        table.getTableHeader().setDefaultRenderer(new TableHeaderAlignment(table) {
            protected int getAlignment() {
                return SwingConstants.CENTER;
            }
        });

        // style
        table.putClientProperty(FlatClientProperties.STYLE, "" + "arc:20;" + "background:$Table.background;");
        table.getTableHeader().putClientProperty(FlatClientProperties.STYLE, "" + "height:30;" + "hoverBackground:null;" + "pressedBackground:null;" + "separatorColor:$TableHeader.background;");
        table.putClientProperty(FlatClientProperties.STYLE, "" + "rowHeight:30;" + "showHorizontalLines:true;" + "intercellSpacing:0,1;" + "cellFocusColor:$TableHeader.hoverBackground;" + "selectionBackground:$TableHeader.hoverBackground;" + "selectionInactiveBackground:$TableHeader.hoverBackground;" + "selectionForeground:$Table.foreground;");
        scrollPane.getVerticalScrollBar().putClientProperty(FlatClientProperties.STYLE, "" + "trackArc:$ScrollBar.thumbArc;" + "trackInsets:3,3,3,3;" + "thumbInsets:3,3,3,3;" + "background:$Table.background;");
        return table;
    }
    private Component createNhapHangHeader() {
        JPanel panel = new JPanel(new MigLayout("insets 5 20 5 20", "[grow,fill]push[][]")); 
        // create title
        JLabel title = new JLabel("Tạo phiếu nhập hàng");
        title.putClientProperty(FlatClientProperties.STYLE, ""
                + "font:bold +2");
        
        JButton btnFill = new JButton("Xác nhận");
        btnFill.addActionListener(e -> {
            
            }
        );
        
        JButton btnClear = new JButton("Clear all");
        btnClear.addActionListener(e -> {
            
        });              
        panel.add(title, "gapx 20");
        panel.add(btnClear, "split 2");
        panel.add(btnFill);             

        panel.putClientProperty(FlatClientProperties.STYLE, "background:null;");
        return panel;
    }
    private Component createDetailTable() {
        JPanel panel = new JPanel(new MigLayout("fillx,wrap,insets 10 0 10 0", "[fill]", "[][][]0[fill,grow]"));

        // Create table model
        Object[] columns = {"Mã SP", "Tên SP", "Số lượng", "Giá nhập", "Ngày hết hạn", "Giá bán", "SL tồn kho"};
        DefaultTableModel model = new DefaultTableModel(columns, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        // Create table and assign to table
        JTable table = new JTable(model);

        // Table scroll with size adjustments
        JScrollPane scrollPane = new JScrollPane(table);
        scrollPane.setBorder(BorderFactory.createEmptyBorder());
        scrollPane.setPreferredSize(new Dimension(400, 150)); // Set preferred size
        scrollPane.setMinimumSize(new Dimension(400, 100));   // Set minimum size if needed

        // Table header alignment
        table.getTableHeader().setDefaultRenderer(new TableHeaderAlignment(table) {
            protected int getAlignment() {
                return SwingConstants.CENTER;
            }
        });

        // Style settings for table
        table.putClientProperty(FlatClientProperties.STYLE, "" +
                "arc:20;" +
                "background:$Table.background;");
        table.getTableHeader().putClientProperty(FlatClientProperties.STYLE, "" +
                "height:30;" +
                "hoverBackground:null;" +
                "pressedBackground:null;" +
                "separatorColor:$TableHeader.background;");
        table.putClientProperty(FlatClientProperties.STYLE, "" +
                "rowHeight:30;" +
                "showHorizontalLines:true;" +
                "intercellSpacing:0,1;" +
                "cellFocusColor:$TableHeader.hoverBackground;" +
                "selectionBackground:$TableHeader.hoverBackground;" +
                "selectionInactiveBackground:$TableHeader.hoverBackground;" +
                "selectionForeground:$Table.foreground;");
        scrollPane.getVerticalScrollBar().putClientProperty(FlatClientProperties.STYLE, "" +
                "trackArc:$ScrollBar.thumbArc;" +
                "trackInsets:3,3,3,3;" +
                "thumbInsets:3,3,3,3;" +
                "background:$Table.background;");

        // Adding separator
        JSeparator separator = new JSeparator();
        separator.putClientProperty(FlatClientProperties.STYLE, "" + "foreground:$Table.gridColor;");
        panel.add(separator, "height 2");

        // Add scrollPane to the panel
        panel.add(scrollPane, "growx"); // Adjust with growx to expand width

        busctpn.getlist();
        for (dtoctphieunhap cc: busctpn.dsctpn){
            model.addRow(cc.toTableRow());
        }
        return panel;
    }

    private Component createGeneralTable() {
        JPanel panel = new JPanel(new MigLayout("fillx,wrap,insets 10 0 10 0", "[fill]", "[][][]0[fill,grow]"));

        // create table model
        Object columns[] = new Object[]{"Mã phiếu nhập", "Ngày nhập hàng", "Nhà cung cấp", "Tổng tiền", "Tên NV", "Ghi chú"};
        DefaultTableModel model = new DefaultTableModel(columns, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        // create table and assign to generalTable
        generalTable = new JTable(model);

        // table scroll
        JScrollPane scrollPane = new JScrollPane(generalTable);
        scrollPane.setBorder(BorderFactory.createEmptyBorder());

        // alignment table header
        generalTable.getTableHeader().setDefaultRenderer(new TableHeaderAlignment(generalTable) {
            protected int getAlignment() {
                return SwingConstants.CENTER;
            }
        });

        // style
        generalTable.putClientProperty(FlatClientProperties.STYLE, "" + "arc:20;" + "background:$Table.background;");
        generalTable.getTableHeader().putClientProperty(FlatClientProperties.STYLE, "" + "height:30;" + "hoverBackground:null;" + "pressedBackground:null;" + "separatorColor:$TableHeader.background;");
        generalTable.putClientProperty(FlatClientProperties.STYLE, "" + "rowHeight:30;" + "showHorizontalLines:true;" + "intercellSpacing:0,1;" + "cellFocusColor:$TableHeader.hoverBackground;" + "selectionBackground:$TableHeader.hoverBackground;" + "selectionInactiveBackground:$TableHeader.hoverBackground;" + "selectionForeground:$Table.foreground;");
        scrollPane.getVerticalScrollBar().putClientProperty(FlatClientProperties.STYLE, "" + "trackArc:$ScrollBar.thumbArc;" + "trackInsets:3,3,3,3;" + "thumbInsets:3,3,3,3;" + "background:$Table.background;");

        // create header
        panel.add(createHeaderGeneralTable());

        JSeparator separator = new JSeparator();
        separator.putClientProperty(FlatClientProperties.STYLE, "" + "foreground:$Table.gridColor;");
        panel.add(separator, "height 2");

        panel.add(scrollPane, "grow");


        buspn.getlist();
        for (dtophieunhap cc : buspn.dspn) {
            model.addRow(cc.toTableRow());
        }
        
        generalTable.addMouseListener(new MouseAdapter() {
        @Override
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            tableMouseClicked(evt);
        }
        });
        return panel;    }

    private Component createHeaderGeneralTable() {
        JPanel panel = new JPanel(new MigLayout("insets 5 20 5 20", "[fill,fill]push[][]")); 

        JTextField txtSearch = new JTextField();
        txtSearch.setPreferredSize(new Dimension(250, 28));
        txtSearch.setMaximumSize(new Dimension(260, 28));
        txtSearch.putClientProperty(FlatClientProperties.TEXT_FIELD_LEADING_ICON, new FlatSVGIcon("../../source/image/icon/search.png", 0.4f));
        txtSearch.putClientProperty(FlatClientProperties.PLACEHOLDER_TEXT, "Tìm kiếm tên NV, tên NCC, mã phiếu nhập");

        JComboBox cbmonth = new JComboBox<>();
        cbmonth.addItem("Tháng");
        for (int i = 1; i <= 12; i++) {
            cbmonth.addItem("Tháng " + i);
        }
        
        JComboBox cbyear = new JComboBox<>();
        cbyear.addItem("Năm");
        /*ArrayList<Integer> years = buspn.listYears();
        for (Integer year : years) {
            cbyear.addItem("Năm " + year);
        }*/

        JButton btnSearch = new JButton("Search");
        btnSearch.addActionListener(e -> searching(txtSearch));

        btnDetail = new JButton("Xem chi tiết");
        btnDetail.addActionListener(e -> {
            JOptionPane.showMessageDialog(null, "Hãy chọn vào 1 hóa đơn để xem chi tiết");
            }
        );
        
        JButton btnClear = new JButton("Reload");
        btnClear.addActionListener(e -> {
            txtSearch.setText("");
            // Clear the row sorter to display all rows
            generalTable.setRowSorter(null);
            DefaultTableModel model = (DefaultTableModel) generalTable.getModel();
            model.setRowCount(0); // Clear existing rows
            
            // Refresh the data source
            buspn.getlist(); 
            // Reload the data into the table
            for (dtophieunhap pn : buspn.dspn) {
                model.addRow(pn.toTableRow());
            }
            // Notify table model of data changes
            model.fireTableDataChanged();
        });

        panel.add(txtSearch, "split 2");
        panel.add(btnSearch);                    

        panel.add(btnClear, "split 2");
        panel.add(btnDetail);             

        panel.putClientProperty(FlatClientProperties.STYLE, "background:null;");
        return panel;
    }

    
    private void searching(JTextField txtSearch, JComboBox cbmonth, JComboBox cbyear) {
        String searchText = txtSearch.getText().trim();
        String selectedMonth = (String) cbmonth.getSelectedItem();
        String selectedYear = (String) cbyear.getSelectedItem();
        if (searchText.isEmpty() && selectedMonth.equals("Tháng") && selectedYear.equals("Năm")) {
            JOptionPane.showMessageDialog(this,
                    "Vui lòng nhập/chọn thông tin tìm kiếm",
                    "Thông báo",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }
        TableRowSorter sorter = new TableRowSorter<>(generalTable.getModel());
        generalTable.setRowSorter(sorter);
        java.util.List<RowFilter<Object, Object>> filters = new ArrayList<>();
        if(!searchText.isEmpty()){
            if(searchText.chars().allMatch(Character::isDigit))
                filters.add(RowFilter.regexFilter(searchText, 0));
            else filters.add(RowFilter.regexFilter("(?i)" + searchText, 1));
        } 
        if(!selectedMonth.equals("Tháng")){
            filters.add(RowFilter.regexFilter(selectedMonth.substring(selectedMonth.length() - 1), 2));
        }
        if(!selectedYear.equals("Năm")){
            filters.add(RowFilter.regexFilter(selectedYear.substring(selectedYear.length() - 1), 3));
        }
        if (!filters.isEmpty()) {
            sorter.setRowFilter(RowFilter.andFilter(filters));
        }
        if(generalTable.getRowCount() == 0)
            JOptionPane.showMessageDialog(null, "Không có dữ liệu ");
    }
    
    private void searching(JTextField txtSearch) {
        String searchText = txtSearch.getText().trim();
        if (searchText.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                    "Vui lòng nhập/chọn thông tin tìm kiếm",
                    "Thông báo",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }
        TableRowSorter sorter = new TableRowSorter<>(generalTable.getModel());
        generalTable.setRowSorter(sorter);
        java.util.List<RowFilter<Object, Object>> filters = new ArrayList<>();

        if(searchText.chars().allMatch(Character::isDigit))
            filters.add(RowFilter.regexFilter(searchText, 0));
        else filters.add(RowFilter.regexFilter("(?i)" + searchText, 1));

        if (!filters.isEmpty()) {
            sorter.setRowFilter(RowFilter.andFilter(filters));
        }
        java.util.List<RowSorter.SortKey> sortKeys = new ArrayList<>();
        sortKeys.add(new RowSorter.SortKey(3, SortOrder.DESCENDING)); // Year column, assuming column index 3
        sortKeys.add(new RowSorter.SortKey(2, SortOrder.DESCENDING)); // Month column, assuming column index 2
        sorter.setSortKeys(sortKeys);
        
        if(generalTable.getRowCount() == 0)
            JOptionPane.showMessageDialog(null, "Không có dữ liệu ");
    }

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {
        for (ActionListener listener : btnDetail.getActionListeners()){
        btnDetail.removeActionListener(listener);
        }

        int row = generalTable.getSelectedRow();
        int idOnClick = (int) generalTable.getValueAt(row,0);
        
        btnDetail.addActionListener(e -> {
            JDialog dialog = new JDialog((JFrame) null, "Chi tiết phiếu nhập", true);
            dialog.setContentPane(detailForms(idOnClick));
            dialog.pack();
            dialog.setLocationRelativeTo(generalTable);
            dialog.setVisible(true);
        });
    }
    private JPanel detailForms(int idOnClick){
        JPanel panel = new JPanel();
        panel.setLayout(new MigLayout("fillx,wrap,insets 5 35 5 35,width 400", "[fill]", ""));
        JTextField txtPNid = new JTextField();
        txtPNid.setEditable(false);

        JTextField txtDate = new JTextField();
        txtDate.setEditable(false);

        JTextField txtNCCid = new JTextField();
        txtNCCid.setEditable(false);

        JTextField txtNCCname = new JTextField();
        txtNCCname.setEditable(false);

        JTextField txtNVid = new JTextField();
        txtNVid.setEditable(false);

        JTextField txtNVname = new JTextField();
        txtNVname.setEditable(false);

        JTextField txtTotal = new JTextField();
        txtTotal.setEditable(false);

        JTextArea txtNote = new JTextArea();
        txtNote.setWrapStyleWord(true);
        txtNote.setLineWrap(true);
        txtNote.setEditable(false);
        txtNote.setWrapStyleWord(true);
        txtNote.setLineWrap(true);
        JScrollPane scroll = new JScrollPane(txtNote);

        dtophieunhap pn = buspn.get(idOnClick);
        panel.add(new JLabel("Thông tin phiếu nhập"), "gapy 5 0");
        panel.add(txtPNid, "split 2, growx 0.5, wmin 100"); // Half width
        panel.add(txtDate, "growx"); // Full width
        txtPNid.setText(String.valueOf(idOnClick));
        txtDate.setText(String.valueOf(pn.getNgayNhap()));

        panel.add(new JLabel("Nhà cung cấp"), "gapy 5 0");
        panel.add(txtNCCid, "split 2, growx 0.5, wmin 100"); // Half width
        panel.add(txtNCCname, "growx"); // Full width
        int nccid = pn.getMaNhaCungCap();
        txtNCCid.setText(String.valueOf(nccid));
        txtNCCname.setText(String.valueOf(pn.getTenNCC(nccid)));

        panel.add(new JLabel("Nhân viên nhập hàng"), "gapy 5 0");
        panel.add(txtNVid, "split 2, growx 0.5, wmin 100"); // Half width
        panel.add(txtNVname, "growx"); // Full width
        int nvid = pn.getMaNhanVien();
        txtNVid.setText(String.valueOf(nvid));
        txtNVname.setText(String.valueOf(pn.getTenNV(nvid)));

        panel.add(new JLabel("Tổng tiền"), "gapy 5 0");
        panel.add(txtTotal); // Half width
        txtTotal.setText(String.valueOf(pn.getTongTien()));
        
        panel.add(new JLabel("Ghi chú"), "gapy 5 0");
        panel.add(scroll, "height 50,grow,pushy");
        txtNote.setText(String.valueOf(pn.getGhiChu()));

        panel.add(createDetailTable());
        return panel;
    }
    
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                // Create a new JFrame
                JFrame frame = new JFrame();
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

                // Add the formphieunhap panel to the frame
                formphieunhap panel = new formphieunhap(2);
                frame.add(panel);

                // Set frame size and make it visible
                frame.setSize(1070, 741); // Adjust size as needed
                frame.setLocationRelativeTo(null); // Center the frame
                frame.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
