/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package gui.form;
import javax.swing.*;
import com.toedter.calendar.JDateChooser;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import com.formdev.flatlaf.FlatClientProperties;
import com.formdev.flatlaf.extras.FlatSVGIcon;
import bus.busphieunhap;
import bus.busctphieunhap;
import bus.busnhacungcap;
import bus.bussanpham;
import dto.dtoctphieunhap;
import dto.dtonhacungcap;
import dto.dtophieunhap;
import dto.dtosanpham;
import gui.modal.ModalDialog;
import gui.modal.component.SimpleModalBorder;
import gui.modal.option.Location;
import gui.modal.option.Option;
import java.time.LocalDate;
import java.time.ZoneId;

import net.miginfocom.swing.MigLayout;

import gui.table.TableHeaderAlignment;
import java.awt.event.ActionEvent;

import java.awt.event.ActionListener;

import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Date;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.TableModel;

import javax.swing.table.TableRowSorter;
/**
 *
 * @author PHUONG ANH
 */
public class formphieunhap extends javax.swing.JPanel {
    private JTable generalTable;
    private busphieunhap buspn = new busphieunhap();
    private busctphieunhap busctpn = new busctphieunhap();
    private bussanpham bussp = new bussanpham();
    private JButton btnDetail;
    private int manv, index = -1;
    JTextField txtNCCid, txtSL, txtGiaNhap, txtGiaBan, txtSPid, txtTotal, txtLoiNhuan;
    JTextArea txtNote;
    JComboBox<String> cbNCCname;
    JDateChooser dateChooser;
    private ArrayList<dtoctphieunhap> nhapHangList= new ArrayList<>();
    AtomicBoolean dialogShown = new AtomicBoolean(false);
    DefaultTableModel modelNhapHang, additionalTable;
    /**
     * Creates new form phieunhap
     */
    public formphieunhap(int manv) {
        this.manv = manv;
        busctphieunhap.updateEXP();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    private void init() {
        setLayout(new MigLayout("fillx,wrap,insets 7 15 7 15", "[fill]", "[][fill,grow]"));
        add(createTab(), "grow, gapx 7 7"); // Allow the tab component to grow
    }

    private Component createTab() {
        JTabbedPane tabb = new JTabbedPane();
        tabb.putClientProperty(FlatClientProperties.STYLE, "tabType:card");
        tabb.addTab("Nhập hàng", createBorder(nhapHangTab()));
        tabb.addTab("Danh sách phiếu nhập", createBorder(createGeneralTable()));
        tabb.setPreferredSize(new Dimension(1070, 700)); // Set preferred size of the tabbed pane
        return tabb;
    }
    private Component createBorder(Component component) {
        JPanel panel = new JPanel(new MigLayout("fill,insets 7 0 7 0", "[fill]", "[fill]"));
        panel.add(component);
        return panel;
    }

    private Component nhapHangTab() {
        JPanel panel = new JPanel();
        panel.setLayout(new MigLayout("fillx, wrap, insets 5 35 5 35"));

        // Add header at the top
        panel.add(createNhapHangHeader(), "span, growx, wrap");

        // Add middle left and right panels
        panel.add(createMidLeftPanel(), "cell 0 1, grow");
        panel.add(createMidRightPanel(), "cell 1 1, grow");

        // Add detail table at the bottom
        panel.add(nhapHangTable(), "span, growx, dock south");
    return panel;
    }

    private JPanel createMidLeftPanel() {
        
    busnhacungcap busncc = new busnhacungcap();
    JPanel midLeft = new JPanel(new MigLayout("fillx, wrap 2", "[fill][grow]"));
    txtNCCid = new JTextField();
    txtNCCid.addKeyListener(new KeyAdapter() {
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if (!Character.isDigit(c)) {
                    e.consume(); // Reject non-numeric characters
                }
            }
        });
    txtNCCid.setHorizontalAlignment(JTextField.CENTER);
    txtNCCid.putClientProperty(FlatClientProperties.PLACEHOLDER_TEXT, "Nhập mã");
    cbNCCname = new JComboBox<>();
    cbNCCname.addItem("");
    for(dtonhacungcap ncc: busncc.list()){
        cbNCCname.addItem(ncc.getTenNhaCungCap());
    }
    txtTotal = new JTextField();
    txtTotal.setHorizontalAlignment(JTextField.CENTER);
    txtTotal.setEditable(false);
    txtNote = new JTextArea();
    txtNote.setWrapStyleWord(true);
    txtNote.setLineWrap(true);
    JScrollPane scroll = new JScrollPane(txtNote);
    
    midLeft.add(new JLabel("Chọn nhà cung cấp"));
    midLeft.add(txtNCCid, "split 2, gapy 5 0,wmin 50");  
    midLeft.add(cbNCCname, "growx, wrap");
    midLeft.add(new JLabel("Ghi chú"), "gapy 5 0");
    midLeft.add(scroll, "growx, hmin 80, wrap");
    midLeft.add(new JLabel("Tổng tiền"), "gapy 5 0");
    midLeft.add(txtTotal, "growx, wrap");

    txtNCCid.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            String id = txtNCCid.getText().trim();
            if (!id.isEmpty()) {
                if(busncc.getById(Integer.parseInt(id)) == null){
                    JOptionPane.showMessageDialog(null, "Không tìm thấy mã Nhà cung cấp đã nhập");
                    return;
                }
                String providerName = busncc.getById(Integer.parseInt(id)).getTenNhaCungCap(); 
                cbNCCname.setSelectedItem(providerName);
                reloadAdditionalTable(String.valueOf(id));
            }
        }
    });
    // Action listener for cbNCCname
    cbNCCname.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            if(cbNCCname.getSelectedItem().equals("")) return;
            String selectedName = (String) cbNCCname.getSelectedItem();
            if (selectedName != null) {
                String providerId = String.valueOf(busncc.getByName(selectedName).getMaNhaCungCap()); // Replace with actual method to get ID
                txtNCCid.setText(providerId);
                reloadAdditionalTable(providerId);
            }
        }
    });

    return midLeft;
}


    private JPanel createMidRightPanel() {
    JPanel midRight = new JPanel(new MigLayout("fillx, wrap"));

    // Add the additional table with growth constraints
    midRight.add(createAdditionalTable(), "growx, growy, wrap");

    return midRight;
}

    private Component createAdditionalTable() {
    JPanel panel = new JPanel();
    panel.setLayout(new BorderLayout()); // Use BorderLayout for easier alignment of components

    // Creating a label and aligning it to the right
    JLabel label = new JLabel("Danh sách sản phẩm cần nhập");
    label.setHorizontalAlignment(SwingConstants.CENTER); // Align to the right
    label.setBorder(BorderFactory.createEmptyBorder(10, 0, 10, 10)); // Add padding for spacing
    panel.add(label, BorderLayout.SOUTH); // Add the label to the top

    // Creating a sample table with some data for demonstration
    String[] columns = {"Mã NCC", "Mã SP", "Tên", "Ngày hết hạn", "Số lượng tồn kho"};
    additionalTable = new DefaultTableModel(columns, 0) {
        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }
    };
    JTable table = new JTable(additionalTable);
    table.setFillsViewportHeight(true);

    // Put the table in a scroll pane
    JScrollPane scrollPane = new JScrollPane(table);
    scrollPane.setPreferredSize(new Dimension(500, 150)); // Adjust size as needed
    scrollPane.setMinimumSize(new Dimension(500, 150));   // Set minimum size
    scrollPane.setBorder(BorderFactory.createEmptyBorder()); // Remove default border

    // Table header alignment
    table.getTableHeader().setDefaultRenderer(new TableHeaderAlignment(table) {
        protected int getAlignment() {
            return SwingConstants.CENTER; // Center align headers
        }
    });

    // Add scrollPane to the center of the panel
    panel.add(scrollPane, BorderLayout.CENTER);

    // Populate the table with data
        for(dtosanpham sp : bussp.needToFillList()){
            additionalTable.addRow(sp.toAdditionalTableRow());
        }
    busctpn.needToFillList();
    for (dtoctphieunhap cc : busctpn.dsctpn) {
        additionalTable.addRow(cc.toAdditionalTableRow());
    }
    
    return panel;
}

    private void reloadAdditionalTable(String maNCC){
        additionalTable.setRowCount(0);
        if(maNCC==null){
            for(dtosanpham sp : bussp.needToFillList()){
                    additionalTable.addRow(sp.toAdditionalTableRow());
            }
                busctpn.needToFillList();
            for (dtoctphieunhap cc : busctpn.dsctpn) {
                additionalTable.addRow(cc.toAdditionalTableRow());
            }
        }
        else{
            for(dtosanpham sp : bussp.needToFillList(Integer.valueOf(maNCC))){
                additionalTable.addRow(sp.toAdditionalTableRow());
            }
                busctpn.needToFillList(Integer.valueOf(maNCC));
            for (dtoctphieunhap cc : busctpn.dsctpn) {
                additionalTable.addRow(cc.toAdditionalTableRow());
            }
        }
    }
    private Component nhapHangTable() {
        JPanel panel = new JPanel(new MigLayout("fillx,wrap,insets 10 0 10 0", "[fill]", "[][][]0[fill,grow]"));

        // Create table model
        Object columns[] = new Object[]{"#", "Mã SP", "Tên sản phẩm", "Giá nhập", "Số lượng", "Ngày hết hạn", "Giá bán"};
        modelNhapHang = new DefaultTableModel(columns, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        // Create table and assign to table
        JTable table = new JTable(modelNhapHang);

        // Table scroll with size adjustments
        JScrollPane scrollPane = new JScrollPane(table);
        scrollPane.setBorder(BorderFactory.createEmptyBorder());
        scrollPane.setMinimumSize(new Dimension(400, 500));   // Set minimum size if needed

        // Table header alignment
        table.getTableHeader().setDefaultRenderer(new TableHeaderAlignment(table) {
            protected int getAlignment() {
                return SwingConstants.CENTER;
            }
        });

        table.getTableHeader().putClientProperty(FlatClientProperties.STYLE, "" +
                "height:30;" +
                "hoverBackground:null;" +
                "pressedBackground:null;" +
                "separatorColor:$TableHeader.background;");
        table.putClientProperty(FlatClientProperties.STYLE, "" +
                "rowHeight:30;" +
                "showHorizontalLines:true;" +
                "intercellSpacing:0,1;" +
                "cellFocusColor:$TableHeader.hoverBackground;" +
                "selectionBackground:$TableHeader.hoverBackground;" +
                "selectionInactiveBackground:$TableHeader.hoverBackground;" +
                "selectionForeground:$Table.foreground;");
        scrollPane.getVerticalScrollBar().putClientProperty(FlatClientProperties.STYLE, "" +
                "trackArc:$ScrollBar.thumbArc;" +
                "trackInsets:3,3,3,3;" +
                "thumbInsets:3,3,3,3;" +
                "background:$Table.background;");

        // Adding separator
        JSeparator separator = new JSeparator();
        separator.putClientProperty(FlatClientProperties.STYLE, "" + "foreground:$Table.gridColor;");
        panel.add(separator, "height 2");

        panel.add(createNhapHangListHeader());
        // Add scrollPane to the panel
        panel.add(scrollPane, "growx"); // Adjust with growx to expand width


        // Add MouseListener for row click
        table.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                index = table.getSelectedRow();
            }
        });

        return panel;
    }
    
    private void reloadDataToNhapHangTable(){

        modelNhapHang.setRowCount(0);
        if (nhapHangList == null) {
            txtTotal.setText("");
            return;
        }
            
        int i = 1;
        int total = 0;
        for (dtoctphieunhap cc: nhapHangList){
            modelNhapHang.addRow(cc.toTableRow(i));
            total += cc.getGiaNhap()*cc.getSoLuong();
            i+=1;
        }
        txtTotal.setText(String.valueOf(total));
        index = -1;
        
    }
    private Component createNhapHangListHeader() {
        JPanel panel = new JPanel(new MigLayout("insets 5 20 5 20", "[fill,fill]push[][]")); 

        JButton btnAdd = new JButton("Thêm sản phẩm nhập");
        btnAdd.addActionListener(e -> {
            String text = txtNCCid.getText().trim();
                if (text.equals("0") || text.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Mã nhà cung cấp không hợp lệ", "Invalid ID", JOptionPane.WARNING_MESSAGE);
                    txtNCCid.requestFocus(); // Bring the focus back to the text field
                    return ;
                }
            showModal();
            }
        );
        
        JButton btnDelete = new JButton("Xóa");
        btnDelete.addActionListener(e -> {
            if (index == -1) {
                JOptionPane.showMessageDialog(panel, "Vui lòng chọn 1 sản phẩm để xóa", "Invalid index", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Show confirmation dialog
            int confirm = JOptionPane.showConfirmDialog(
                panel, 
                "Bạn có chắc chắn muốn xóa sản phẩm này?", 
                "Xác nhận xóa", 
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE
            );

            // Proceed only if the user confirms
            if (confirm == JOptionPane.YES_OPTION) {
                nhapHangList.remove(index);
                reloadDataToNhapHangTable();
                if (nhapHangList != null) {
                    txtNCCid.setEditable(true);
                    cbNCCname.setEnabled(true);
                }
            }
        });

        
        JButton btnEdit = new JButton("Sửa");
        btnEdit.addActionListener(e -> {
            if (index == -1){
                JOptionPane.showMessageDialog(panel, "Vui lòng chọn 1 sản phẩm để chỉnh sửa thông tin", "Invalid index", JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            showModal(nhapHangList.get(index));
        });    
        panel.add(btnAdd);
        panel.add(btnEdit);
        panel.add(btnDelete);
        
                     
        panel.putClientProperty(FlatClientProperties.STYLE, "background:null;");
        return panel;
    }

    private void showModal( dtoctphieunhap editSP) {
    Option option = ModalDialog.createOption();
    option.getLayoutOption()
          .setSize(-1, 1f)
          .setLocation(Location.TRAILING, Location.TOP)
          .setAnimateDistance(0.7f, 0);

    ModalDialog.showModal(
        this,
        new SimpleModalBorder(
            SimpleInputForms(editSP), 
            "Chỉnh sửa thông tin",
            SimpleModalBorder.YES_NO_OPTION, // Ensure this is the option you want
            (controller, action) -> {
                
                if (action == SimpleModalBorder.YES_OPTION) {
                    
                    checkEmpty();
                    
                    double total = txtTotal.getText().isEmpty() ? 0 : doubleValueofTextField(txtTotal);
                        SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
                        dtoctphieunhap ct;
                        LocalDate localDate = dateChooser.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
                        try {
                            ct = new dtoctphieunhap(
                                busctpn.maxID() + 1,
                                intValueofTextField(txtSL),
                                doubleValueofTextField(txtGiaNhap),
                                buspn.maxID() + 1,
                                intValueofTextField(txtSPid),
                                java.sql.Date.valueOf(localDate), // Use java.sql.Date for database compatibility
                                intValueofTextField(txtSL),
                                "", // Update the logic here
                                doubleValueofTextField(txtGiaBan)
                            );
                            nhapHangList.remove(index);
                            nhapHangList.add(index, ct);
                            total = total + intValueofTextField(txtSL)*doubleValueofTextField(txtGiaNhap);
                            txtTotal.setText(String.valueOf(total));
                        } catch (Exception ex) {
                            Logger.getLogger(formphieunhap.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        reloadDataToNhapHangTable();
                }
                controller.close();
            }
        ),
        option
    );
}
    private void showModal( ) {
    Option option = ModalDialog.createOption();
    option.getLayoutOption()
          .setSize(-1, 1f)
          .setLocation(Location.TRAILING, Location.TOP)
          .setAnimateDistance(0.7f, 0);

    ModalDialog.showModal(
        this,
        new SimpleModalBorder(
            SimpleInputForms(), 
            "Nhập thông tin sản phẩm",
            SimpleModalBorder.YES_NO_OPTION, // Ensure this is the option you want
            (controller, action) -> {
                
                if (action == SimpleModalBorder.YES_OPTION) {
                    
                    if(checkEmpty()){
                        return;
                    }
                    
                    double total = txtTotal.getText().isEmpty() ? 0 : doubleValueofTextField(txtTotal);
                        SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
                        dtoctphieunhap ct;
                        LocalDate localDate = dateChooser.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
                        try {
                            ct = new dtoctphieunhap(
                                busctpn.maxID() + 1,
                                intValueofTextField(txtSL),
                                doubleValueofTextField(txtGiaNhap),
                                buspn.maxID() + 1,
                                intValueofTextField(txtSPid),
                                java.sql.Date.valueOf(localDate), // Use java.sql.Date for database compatibility
                                intValueofTextField(txtSL),
                                "", // Update the logic here
                                doubleValueofTextField(txtGiaBan)
                            );
                            nhapHangList.add(ct);
                            total = total + intValueofTextField(txtSL)*doubleValueofTextField(txtGiaNhap);
                            txtTotal.setText(String.valueOf(total));
                        } catch (Exception ex) {
                            Logger.getLogger(formphieunhap.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        reloadDataToNhapHangTable();
                        if(nhapHangList != null){
                                        txtNCCid.setEditable(false);
                            UIManager.put("ComboBox.disabledForeground", Color.BLACK);
                            cbNCCname.setEnabled(false); // Works with new LookAndFeel settings
                        }
                }
            }
        ),
        option
    );
}
    private int intValueofTextField(JTextField t){
        return Integer.parseInt(String.valueOf(t.getText()));
    }
    private double doubleValueofTextField(JTextField t){
        return Double.parseDouble(String.valueOf(t.getText()));
    }
    private Component SimpleInputForms() {
        JPanel panel = new JPanel();
        JLabel imageDisplayLabel = new JLabel();
        imageDisplayLabel.setPreferredSize(new Dimension(330, 350));
        panel.setLayout(new MigLayout("fillx,wrap,insets 5 35 5 35,width 400", "[fill]", ""));
        ArrayList<dtosanpham> products = bussp.listByNhaCungCapID(Integer.parseInt(txtNCCid.getText()));
                // Create TextField and ComboBox
        txtSPid = new JTextField();
        JComboBox<String> txtSPname = new JComboBox<>();
        txtSPname.addItem(""); // Add a blank item
        for (dtosanpham sp : products) {
                txtSPname.addItem(sp.getTenSanPham());
            }

        // Add KeyListener to txtSPid
        txtSPid.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    if (dialogShown.get()) {
                return; // Prevent duplicate dialogs
            }

            for (dtosanpham sp : products) {
                txtSPname.addItem(sp.getTenSanPham());
                if (String.valueOf(sp.getMaSanPham()).equals(txtSPid.getText())) {
                    txtSPname.setSelectedItem(sp.getTenSanPham());
                    bussanpham bussp = new bussanpham();
                    String imgPath = bussp.getById(intValueofTextField(txtSPid)).getImg();
                if(!imgPath.isEmpty()){
                    ImageIcon curImg = new ImageIcon(System.getProperty("user.dir") + "/src/source/image/sanpham/" + imgPath);
                    Image scaledImg = curImg.getImage().getScaledInstance(330, 350, Image.SCALE_SMOOTH);
                    ImageIcon editImg = new ImageIcon(scaledImg);
                    imageDisplayLabel.setIcon(editImg);
                }
                    return; // Stop further processing if product is found
                }
            }
            // Show dialog if no product matches
            dialogShown.set(true);
            JOptionPane.showMessageDialog(null, "Không tìm thấy sản phẩm trong danh sách bán hàng của Nhà cung cấp");
            dialogShown.set(false);
                }
            }
        });

        // Shared method to handle product selection logic


        // Update txtSPid when ComboBox selection changes
        txtSPname.addActionListener(e -> {
            String selectedName = (String) txtSPname.getSelectedItem();
            if (selectedName != null && !selectedName.isEmpty()) {
                txtSPid.setText(String.valueOf(bussp.getByName(selectedName).getMaSanPham()));
                String imgPath = bussp.getById(intValueofTextField(txtSPid)).getImg();
                if(!imgPath.isEmpty()){
                    ImageIcon curImg = new ImageIcon(System.getProperty("user.dir") + "/src/source/image/sanpham/" + imgPath);
                    Image scaledImg = curImg.getImage().getScaledInstance(330, 350, Image.SCALE_SMOOTH);
                    ImageIcon editImg = new ImageIcon(scaledImg);
                    imageDisplayLabel.setIcon(editImg);
                }
            }
        });

        JPanel p = quantity();
        p.setMaximumSize(new Dimension(100, 28));
         dateChooser = new JDateChooser();
        dateChooser.getDateEditor().getUiComponent().setEnabled(true); // Keeps it visually enabled
        ((JTextField) dateChooser.getDateEditor().getUiComponent()).setEditable(false);
        dateChooser.setMaximumSize(new Dimension(180, 28));
         txtGiaNhap = new JTextField();
        txtGiaNhap.setMaximumSize(new Dimension(120, 28));
        txtLoiNhuan = new JTextField();
        txtLoiNhuan.setMaximumSize(new Dimension(100, 28));
        JComboBox<String> unit = new JComboBox<>(new String[]{"Đồng", "%"});
        unit.setMaximumSize(new Dimension(80, 28));
         txtGiaBan = new JTextField();
        txtGiaBan.setEditable(false);
        txtGiaBan.setMinimumSize(new Dimension(120, 28));

        // Placeholder styling (use your placeholder library)
        txtSPid.putClientProperty(FlatClientProperties.PLACEHOLDER_TEXT, "Nhập mã SP");

        txtSPid.addKeyListener(new KeyAdapter() {
        public void keyTyped(KeyEvent e) {
            char c = e.getKeyChar();
            if (!Character.isDigit(c)) {
                e.consume(); // Reject non-numeric characters
            } else {
                // Check if the current input will result in a number <= 0
                String currentText = txtSPid.getText();
                String updatedText = currentText + c;
                if (Integer.parseInt(updatedText) <= 0) {
                    e.consume(); // Reject numbers <= 0
                }
            }
        }
    });

    // Input validation for txtGiaNhap and txtLoiNhuan
    txtGiaNhap.addKeyListener(new KeyAdapter() {
        public void keyTyped(KeyEvent e) {
            char c = e.getKeyChar();
            if (!Character.isDigit(c)) {
                e.consume();
            } else {
                String currentText = txtGiaNhap.getText();
                String updatedText = currentText + c;
                if (Integer.parseInt(updatedText) <= 0) {
                    e.consume();
                }
            }
        }
    });

    txtLoiNhuan.addKeyListener(new KeyAdapter() {
        public void keyTyped(KeyEvent e) {
            char c = e.getKeyChar();
            if (!Character.isDigit(c)) {
                e.consume();
            } else {
                String currentText = txtLoiNhuan.getText();
                String updatedText = currentText + c;
                if (Integer.parseInt(updatedText) <= 0) {
                    e.consume();
                }
            }
        }
    });


        // Prevent past dates in dateChooser
        dateChooser.getDateEditor().addPropertyChangeListener(evt -> {
            if ("date".equals(evt.getPropertyName())) {
                Date selectedDate = dateChooser.getDate();
                if (selectedDate != null && selectedDate.before(new Date())) {
                    JOptionPane.showMessageDialog(panel, "Ngày đã chọn không hợp lệ", "Invalid Date", JOptionPane.WARNING_MESSAGE);
                    dateChooser.setDate(null); // Reset invalid date
                }
            }
        });

        // Add components to the panel
        panel.add(new JLabel("Mã SP "), "gapy 5 0, split 2");
        panel.add(new JLabel("Tên SP "));
        panel.add(txtSPid, "split 2");
        panel.add(txtSPname);
        panel.add(new JLabel("Số lượng"), "gapy 5 0, split 2");
        panel.add(new JLabel("Ngày hết hạn"));
        panel.add(p, "gapy 10, grow, alignx center, split 2");
        panel.add(dateChooser, "gapy 10, grow, alignx center, wrap");
        panel.add(new JLabel("Giá nhập"), "gapy 5 0, split 2");
        panel.add(new JLabel("Lợi nhuận"));
        panel.add(txtGiaNhap, "split 3");
        panel.add(txtLoiNhuan, "gapright 0, alignx right");
        panel.add(unit, "gapleft 0");
        panel.add(new JLabel("Giá bán"), "gapy 5 0, split 2");
        panel.add(txtGiaBan);
        panel.add(new JLabel("Hình ảnh sản phẩm "), "gapy 5 0");
        panel.add(imageDisplayLabel, "height 150,grow,pushy");
        
            // Unit selection and txtGiaBan calculation
        unit.addActionListener(e -> {
            String selectedItem = (String) unit.getSelectedItem();
            try {
                double giaNhap = Double.parseDouble(txtGiaNhap.getText().isEmpty() ? "0" : txtGiaNhap.getText());
                double loiNhuan = Double.parseDouble(txtLoiNhuan.getText().isEmpty() ? "0" : txtLoiNhuan.getText());

                if ("Đồng".equals(selectedItem)) {
                    // If unit is "Đồng", simply add the profit to the base price
                    txtGiaBan.setText(String.valueOf(giaNhap + loiNhuan));
                } else if ("%".equals(selectedItem)) {
                    // If unit is "%", calculate as a percentage increase
                    txtGiaBan.setText(String.valueOf(giaNhap * (1 + loiNhuan / 100)));
                }
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(panel, "Please enter valid numbers for Giá nhập and Lợi nhuận.", "Input Error", JOptionPane.ERROR_MESSAGE);
            }
        });

        // Input validation for GiaNhap and LoiNhuan fields to recompute GiaBan on text change
        KeyAdapter recalculateGiaBan = new KeyAdapter() {
            public void keyReleased(KeyEvent e) {
                unit.getActionListeners()[0].actionPerformed(null); // Trigger unit ActionListener for recalculation
            }
        };
        txtGiaNhap.addKeyListener(recalculateGiaBan);
        txtLoiNhuan.addKeyListener(recalculateGiaBan);


        return panel;
    }

    private Component SimpleInputForms(dtoctphieunhap pn) {
        
        JPanel panel = new JPanel();
        panel.setLayout(new MigLayout("fillx,wrap,insets 5 35 5 35,width 400", "[fill]", ""));

        int id = pn.getMaSanPham();
        txtSPid = new JTextField();
        txtSPid.setText(String.valueOf(id));
        JTextField txtSPname = new JTextField();
        txtSPid.setEditable(false);
        txtSPname.setText(pn.getTenSP(id));
        txtSPname.setEditable(false);

        JLabel imageDisplayLabel = new JLabel();
        imageDisplayLabel.setPreferredSize(new Dimension(330, 350));
        String imgPath = bussp.getById(intValueofTextField(txtSPid)).getImg();
        ImageIcon curImg = new ImageIcon(System.getProperty("user.dir") + "/src/source/image/sanpham/" + imgPath);
        Image scaledImg = curImg.getImage().getScaledInstance(330, 350, Image.SCALE_SMOOTH);
        ImageIcon editImg = new ImageIcon(scaledImg);
        imageDisplayLabel.setIcon(editImg);
        
        JPanel p = quantity();
        p.setMaximumSize(new Dimension(100, 28));
        dateChooser = new JDateChooser();
        dateChooser.getDateEditor().getUiComponent().setEnabled(true); // Keeps it visually enabled
        dateChooser.setDate(pn.getNgayhethan());
        ((JTextField) dateChooser.getDateEditor().getUiComponent()).setEditable(false);
        dateChooser.setMaximumSize(new Dimension(180, 28));
        txtGiaNhap = new JTextField();
        txtGiaNhap.setText(String.valueOf(pn.getGiaNhap()));
        txtGiaNhap.setMaximumSize(new Dimension(120, 28));
        txtLoiNhuan = new JTextField();
        txtLoiNhuan.setMaximumSize(new Dimension(100, 28));
        JComboBox<String> unit = new JComboBox<>(new String[]{"Đồng", "%"});
        unit.setMaximumSize(new Dimension(80, 28));
        txtGiaBan = new JTextField();
        txtGiaBan.setText(String.valueOf(pn.getGiaBan()));
        txtGiaBan.setEditable(false);
        txtGiaBan.setMinimumSize(new Dimension(120, 28));
        txtSL.setText(String.valueOf(pn.getSoLuong()));
        txtLoiNhuan.setText(String.valueOf(pn.getGiaBan() - pn.getGiaNhap()));
        // Placeholder styling (use your placeholder library)
        txtSPid.putClientProperty(FlatClientProperties.PLACEHOLDER_TEXT, "Nhập mã SP");

        // Input validation for txtSPid
        
        txtSPid.addKeyListener(new KeyAdapter() {
        public void keyTyped(KeyEvent e) {
            char c = e.getKeyChar();
            if (!Character.isDigit(c)) {
                e.consume(); // Reject non-numeric characters
            } else {
                // Check if the current input will result in a number <= 0
                String currentText = txtSPid.getText();
                String updatedText = currentText + c;
                if (Integer.parseInt(updatedText) <= 0) {
                    e.consume(); // Reject numbers <= 0
                }
            }
        }
    });

    // Input validation for txtGiaNhap and txtLoiNhuan
    txtGiaNhap.addKeyListener(new KeyAdapter() {
        public void keyTyped(KeyEvent e) {
            char c = e.getKeyChar();
            if (!Character.isDigit(c)) {
                e.consume();
            } else {
                String currentText = txtGiaNhap.getText();
                String updatedText = currentText + c;
                if (Integer.parseInt(updatedText) <= 0) {
                    e.consume();
                }
            }
        }
    });

    txtLoiNhuan.addKeyListener(new KeyAdapter() {
        public void keyTyped(KeyEvent e) {
            char c = e.getKeyChar();
            if (!Character.isDigit(c)) {
                e.consume();
            } else {
                String currentText = txtLoiNhuan.getText();
                String updatedText = currentText + c;
                if (Integer.parseInt(updatedText) <= 0) {
                    e.consume();
                }
            }
        }
    });

        // Prevent past dates in dateChooser
        dateChooser.getDateEditor().addPropertyChangeListener(evt -> {
            if ("date".equals(evt.getPropertyName())) {
                Date selectedDate = dateChooser.getDate();
                if (selectedDate != null && selectedDate.before(new Date())) {
                    JOptionPane.showMessageDialog(panel, "Ngày đã chọn không hợp lệ", "Invalid Date", JOptionPane.WARNING_MESSAGE);
                    dateChooser.setDate(null); // Reset invalid date
                }
            }
        });

        // Add components to the panel
        panel.add(new JLabel("Mã SP "), "gapy 5 0, split 2");
        panel.add(new JLabel("Tên SP "));
        panel.add(txtSPid, "split 2");
        panel.add(txtSPname);
        panel.add(new JLabel("Số lượng"), "gapy 5 0, split 2");
        panel.add(new JLabel("Ngày hết hạn"));
        panel.add(p, "gapy 10, grow, alignx center, split 2");
        panel.add(dateChooser, "gapy 10, grow, alignx center, wrap");
        panel.add(new JLabel("Giá nhập"), "gapy 5 0, split 2");
        panel.add(new JLabel("Lợi nhuận"));
        panel.add(txtGiaNhap, "split 3");
        panel.add(txtLoiNhuan, "gapright 0, alignx right");
        panel.add(unit, "gapleft 0");
        panel.add(new JLabel("Giá bán"), "gapy 5 0, split 2");
        panel.add(txtGiaBan);
        panel.add(new JLabel("Hình ảnh sản phẩm "), "gapy 5 0");
        panel.add(imageDisplayLabel, "height 150,grow,pushy");
        
            // Unit selection and txtGiaBan calculation
        unit.addActionListener(e -> {
            String selectedItem = (String) unit.getSelectedItem();
            try {
                double giaNhap = Double.parseDouble(txtGiaNhap.getText().isEmpty() ? "0" : txtGiaNhap.getText());
                double loiNhuan = Double.parseDouble(txtLoiNhuan.getText().isEmpty() ? "0" : txtLoiNhuan.getText());

                if ("Đồng".equals(selectedItem)) {
                    // If unit is "Đồng", simply add the profit to the base price
                    txtGiaBan.setText(String.valueOf(giaNhap + loiNhuan));
                } else if ("%".equals(selectedItem)) {
                    // If unit is "%", calculate as a percentage increase
                    txtGiaBan.setText(String.valueOf(giaNhap * (1 + loiNhuan / 100)));
                }
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(panel, "Please enter valid numbers for Giá nhập and Lợi nhuận.", "Input Error", JOptionPane.ERROR_MESSAGE);
            }
        });

        // Input validation for GiaNhap and LoiNhuan fields to recompute GiaBan on text change
        KeyAdapter recalculateGiaBan = new KeyAdapter() {
            public void keyReleased(KeyEvent e) {
                unit.getActionListeners()[0].actionPerformed(null); // Trigger unit ActionListener for recalculation
            }
        };
        txtGiaNhap.addKeyListener(recalculateGiaBan);
        txtLoiNhuan.addKeyListener(recalculateGiaBan);

        return panel;
    }


    private JPanel quantity() {
        JPanel panel = new JPanel(new GridLayout(0, 3, 0, 5));

        txtSL = new JTextField("1");
        txtSL.setHorizontalAlignment(JTextField.CENTER);
        txtSL.addKeyListener(new KeyAdapter() {
        public void keyTyped(KeyEvent e) {
            char c = e.getKeyChar();
            if (!Character.isDigit(c)) {
                e.consume();
            }
            }
        });

        
        JButton plusButton = new JButton("+");
        JButton minusButton = new JButton("-");

        // Set font size
        Font buttonFont = new Font("Arial", Font.BOLD, 12); // Smaller font size
        plusButton.setFont(buttonFont);
        minusButton.setFont(buttonFont);

        // Set preferred sizes
        txtSL.setPreferredSize(new Dimension(40, 30)); 
        plusButton.setPreferredSize(new Dimension(30, 30));
        minusButton.setPreferredSize(new Dimension(30, 30));

        // Adjust insets for proper padding
        plusButton.setMargin(new Insets(2, 2, 2, 2));
        minusButton.setMargin(new Insets(2, 2, 2, 2));

        // Button Actions
        plusButton.addActionListener(e -> {
            try {
                int quantity = Integer.parseInt(txtSL.getText());
                txtSL.setText(String.valueOf(quantity + 1));
            } catch (NumberFormatException ex) {
                txtSL.setText("1"); // Reset to default
            }
        });

        minusButton.addActionListener(e -> {
            try {
                int quantity = Integer.parseInt(txtSL.getText());
                if (quantity > 1) {
                    txtSL.setText(String.valueOf(quantity - 1));
                }
            } catch (NumberFormatException ex) {
                txtSL.setText("1"); // Reset to default
            }
        });

        plusButton.setToolTipText("Increase quantity");
        minusButton.setToolTipText("Decrease quantity");

        panel.add(minusButton);
        panel.add(txtSL);
        panel.add(plusButton);

    return panel;
}

    private boolean checkEmpty(){
        
        String text = txtSPid.getText().trim();
                if (text.equals("0") || text.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "ID sản phẩm không hợp lệ", "Invalid ID", JOptionPane.WARNING_MESSAGE);
                    txtSPid.requestFocus(); // Bring the focus back to the text field
                    return true;
                }
                
        text = txtSL.getText().trim();
                if (text.equals("0") || text.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Số lượng sản phẩm không hợp lệ", "Invalid Input", JOptionPane.WARNING_MESSAGE);
                    txtSL.requestFocus(); // Bring the focus back to the text field
                    return true;
                }
        text = txtGiaBan.getText().trim();
                if (text.equals("0") || text.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Giá bán không hợp lệ", "Invalid Input", JOptionPane.WARNING_MESSAGE);
                    txtGiaBan.requestFocus(); // Bring the focus back to the text field
                    return true;
                }
        text = txtLoiNhuan.getText().trim();
                if (text.equals("0") || text.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Lợi nhuận chưa có giá trị", "Invalid Input", JOptionPane.WARNING_MESSAGE);
                    txtLoiNhuan.requestFocus(); // Bring the focus back to the text field
                    return true;
                }
        return false;
    }
    private Component createNhapHangHeader() {
        JPanel panel = new JPanel(new MigLayout("insets 5 0 5 20", "[grow,fill]push[][]")); 
        // create title
        JLabel title = new JLabel("Tạo phiếu nhập hàng");
        title.putClientProperty(FlatClientProperties.STYLE, ""
                + "font:bold +2");
        
        JButton btnConfirm = new JButton("Xác nhận");
        btnConfirm.addActionListener(e -> {
            if(nhapHangList == null || txtNCCid.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Vui lòng chọn nhà cung cấp và thêm sản phẩm nhập hàng để tạo phiếu nhập");
            return;
            }
            dtophieunhap pn = new dtophieunhap(buspn.maxID() + 1, Timestamp.valueOf(LocalDateTime.now().withNano((LocalDateTime.now().getNano() / 1_000_000) * 1_000_000)), doubleValueofTextField(txtTotal), intValueofTextField(txtNCCid), manv, String.valueOf(txtNote.getText()));
            buspn.create(pn);

            for(dtoctphieunhap ct : nhapHangList){
                busctpn.create(ct);
            }
            JOptionPane.showMessageDialog(null, "Nhập hàng thành công");
            reset();  
            reloadGeneralTable();
        });
        
        JButton btnClear = new JButton("Xóa tất cả");
        btnClear.addActionListener(e -> {
            // Show confirmation dialog
            int confirm = JOptionPane.showConfirmDialog(
                null,
                "Bạn có chắc chắn muốn xóa tất cả thông tin phiếu nhập?",
                "Xác nhận xóa",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE
            );

            // Proceed with reset if the user confirms
            if (confirm == JOptionPane.YES_OPTION) {
                reset();
            }
        });
              
        panel.add(title, "gapx 20");
        panel.add(btnClear, "split 2");
        panel.add(btnConfirm);             

        panel.putClientProperty(FlatClientProperties.STYLE, "background:null;");
        return panel;
    }
    
        private void reset (){
        txtNCCid.setText("");
        cbNCCname.setSelectedItem("");
        txtNote.setText("");
        nhapHangList = new ArrayList<>();
        reloadDataToNhapHangTable();
        txtTotal.setText("");
        txtNCCid.setEditable(true);
        cbNCCname.setEnabled(true);
        reloadAdditionalTable(null);
        index = -1;
    }
    private Component createDetailTable(int maphieunhap) {
        JPanel panel = new JPanel(new MigLayout("fillx,wrap,insets 10 0 10 0", "[fill]", "[][][]0[fill,grow]"));

        // Create table model
        Object[] columns = {"#", "Mã SP", "Tên SP", "Giá nhập", "Số lượng", "HSD", "Giá bán", "SL tồn kho"};
        DefaultTableModel model = new DefaultTableModel(columns, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        // Create table and assign to table
        JTable table = new JTable(model);

        // Table scroll with size adjustments
        JScrollPane scrollPane = new JScrollPane(table);
        scrollPane.setBorder(BorderFactory.createEmptyBorder());
        scrollPane.setPreferredSize(new Dimension(400, 150)); // Set preferred size
        scrollPane.setMinimumSize(new Dimension(400, 100));   // Set minimum size if needed

        // Table header alignment
        table.getTableHeader().setDefaultRenderer(new TableHeaderAlignment(table) {
            protected int getAlignment() {
                return SwingConstants.CENTER;
            }
        });

        table.getColumnModel().getColumn(0).setPreferredWidth(20);
        table.getColumnModel().getColumn(2).setPreferredWidth(120);
        table.getColumnModel().getColumn(5).setPreferredWidth(120);
        table.getColumnModel().getColumn(7).setPreferredWidth(70);
        
        table.getTableHeader().putClientProperty(FlatClientProperties.STYLE, "" +
                "height:30;" +
                "hoverBackground:null;" +
                "pressedBackground:null;" +
                "separatorColor:$TableHeader.background;");
        table.putClientProperty(FlatClientProperties.STYLE, "" +
                "rowHeight:30;" +
                "showHorizontalLines:true;" +
                "intercellSpacing:0,1;" +
                "cellFocusColor:$TableHeader.hoverBackground;" +
                "selectionBackground:$TableHeader.hoverBackground;" +
                "selectionInactiveBackground:$TableHeader.hoverBackground;" +
                "selectionForeground:$Table.foreground;");
        scrollPane.getVerticalScrollBar().putClientProperty(FlatClientProperties.STYLE, "" +
                "trackArc:$ScrollBar.thumbArc;" +
                "trackInsets:3,3,3,3;" +
                "thumbInsets:3,3,3,3;" +
                "background:$Table.background;");

        // Adding separator
        JSeparator separator = new JSeparator();
        separator.putClientProperty(FlatClientProperties.STYLE, "" + "foreground:$Table.gridColor;");
        panel.add(separator, "height 2");

        // Add scrollPane to the panel
        panel.add(scrollPane, "growx"); // Adjust with growx to expand width

        busctpn.getlist(maphieunhap);
        int i = 1;
        for (dtoctphieunhap cc: busctpn.dsctpn){

            model.addRow(cc.toTableRow(i));
            i+=1;
        }
        return panel;
    }

    private Component createGeneralTable() {
        JPanel panel = new JPanel(new MigLayout("fill, wrap, insets 10 0 10 0", "[fill]", "[][][]0[fill,grow]"));

        // Create table model
        Object columns[] = new Object[]{"Mã phiếu nhập", "Ngày nhập hàng", "Nhà cung cấp", "Tổng tiền", "Tên NV", "Ghi chú"};
        DefaultTableModel model = new DefaultTableModel(columns, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        // Create table and assign to generalTable
        generalTable = new JTable(model);

        // Table scroll pane
        JScrollPane scrollPane = new JScrollPane(generalTable);
        scrollPane.setMinimumSize(new Dimension(1000,600));
        scrollPane.setBorder(BorderFactory.createEmptyBorder());

        // Align table header
        generalTable.getTableHeader().setDefaultRenderer(new TableHeaderAlignment(generalTable) {
            protected int getAlignment() {
                return SwingConstants.CENTER;
            }
        });


        generalTable.getTableHeader().putClientProperty(FlatClientProperties.STYLE, "height:30; hoverBackground:null; pressedBackground:null; separatorColor:$TableHeader.background;");
        generalTable.putClientProperty(FlatClientProperties.STYLE, "rowHeight:30; showHorizontalLines:true; intercellSpacing:0,1; cellFocusColor:$TableHeader.hoverBackground; selectionBackground:$TableHeader.hoverBackground; selectionInactiveBackground:$TableHeader.hoverBackground; selectionForeground:$Table.foreground;");
        scrollPane.getVerticalScrollBar().putClientProperty(FlatClientProperties.STYLE, "trackArc:$ScrollBar.thumbArc; trackInsets:3,3,3,3; thumbInsets:3,3,3,3; background:$Table.background;");

        // Create header and separator
        panel.add(createHeaderGeneralTable());
        JSeparator separator = new JSeparator();
        separator.putClientProperty(FlatClientProperties.STYLE, "foreground:$Table.gridColor;");
        panel.add(separator, "height 2");

        // Add the scroll pane with grow constraint
        panel.add(scrollPane, "grow");

        // Populate table with data
        buspn.getlist();
        for (dtophieunhap cc : buspn.dspn) {
            model.addRow(cc.toTableRow());
        }

        generalTable.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });

        return panel;
    }


    private Component createHeaderGeneralTable() {
        JPanel panel = new JPanel(new MigLayout("insets 5 20 5 20", "[fill,fill]push[][]")); 

        JTextField txtSearch = new JTextField();
        txtSearch.setPreferredSize(new Dimension(250, 28));
        txtSearch.setMaximumSize(new Dimension(260, 28));
        txtSearch.putClientProperty(FlatClientProperties.TEXT_FIELD_LEADING_ICON, new FlatSVGIcon("../../source/image/icon/search.png", 0.4f));
        txtSearch.putClientProperty(FlatClientProperties.PLACEHOLDER_TEXT, "Tìm kiếm tên NV, tên NCC, mã phiếu nhập");

        JComboBox cbmonth = new JComboBox<>();
        cbmonth.addItem("Tháng");
        for (int i = 1; i <= 12; i++) {
            cbmonth.addItem("Tháng " + i);
        }
        
        JComboBox cbyear = new JComboBox<>();
        cbyear.addItem("Năm");
        /*ArrayList<Integer> years = buspn.listYears();
        for (Integer year : years) {
            cbyear.addItem("Năm " + year);
        }*/

        JButton btnSearch = new JButton("Search");
        btnSearch.addActionListener(e -> searching(txtSearch));

        btnDetail = new JButton("Xem chi tiết");
        btnDetail.addActionListener(e -> {
            JOptionPane.showMessageDialog(null, "Hãy chọn vào 1 hóa đơn để xem chi tiết");
            }
        );
        
        JButton btnClear = new JButton("Reload");
        btnClear.addActionListener(e -> {
            txtSearch.setText("");
            reloadGeneralTable();
            
        });

        panel.add(txtSearch, "split 2");
        panel.add(btnSearch);                    

        panel.add(btnClear, "split 2");
        panel.add(btnDetail);             

        panel.putClientProperty(FlatClientProperties.STYLE, "background:null;");
        return panel;
    }
    public void reloadGeneralTable(){
        generalTable.setRowSorter(null);
            DefaultTableModel model = (DefaultTableModel) generalTable.getModel();
        model.setRowCount(0); // Clear existing rows
            
            // Refresh the data source
            buspn.getlist(); 
            // Reload the data into the table
            for (dtophieunhap pn : buspn.dspn) {
                model.addRow(pn.toTableRow());
            }
    }

    
    private void searching(JTextField txtSearch) {
        String searchText = txtSearch.getText().trim();

        if (searchText.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                    "Vui lòng nhập/chọn thông tin tìm kiếm",
                    "Thông báo",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }

        TableRowSorter<TableModel> sorter = new TableRowSorter<>(generalTable.getModel());
        generalTable.setRowSorter(sorter);

        RowFilter<TableModel, Object> filter;
        if (searchText.chars().allMatch(Character::isDigit)) {
            java.util.List<RowFilter<TableModel, Object>> filters = new ArrayList<>();
            filters.add(RowFilter.regexFilter("(?i)" + searchText, 2,0)); // Case-insensitive search in column 2
            filter = RowFilter.andFilter(filters);
        } else {
            java.util.List<RowFilter<TableModel, Object>> filters = new ArrayList<>();
            filters.add(RowFilter.regexFilter("(?i)" + searchText, 2,4)); // Case-insensitive search in column 2
            filter = RowFilter.andFilter(filters);
        }
        sorter.setRowFilter(filter);

        java.util.List<RowSorter.SortKey> sortKeys = new ArrayList<>();
        sortKeys.add(new RowSorter.SortKey(1, SortOrder.DESCENDING));
        sorter.setSortKeys(sortKeys);

        if (generalTable.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "Không có dữ liệu");
        }
    }

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {
        for (ActionListener listener : btnDetail.getActionListeners()){
        btnDetail.removeActionListener(listener);
        }

        int row = generalTable.getSelectedRow();
        int idOnClick = (int) generalTable.getValueAt(row,0);
        
        btnDetail.addActionListener(e -> {
            JDialog dialog = new JDialog((JFrame) null, "Chi tiết phiếu nhập", true);
            dialog.setContentPane(detailForms(idOnClick));
            dialog.pack();
            dialog.setLocationRelativeTo(generalTable);
            dialog.setVisible(true);
        });
    }
    private JPanel detailForms(int idOnClick){
        JPanel panel = new JPanel();
        panel.setLayout(new MigLayout("fillx,wrap,insets 5 35 5 35,width 600", "[fill]", ""));
        JTextField txtPNid = new JTextField();
        txtPNid.setEditable(false);

        JTextField txtDate = new JTextField();
        txtDate.setEditable(false);

        JTextField txtNCCid = new JTextField();
        txtNCCid.setEditable(false);
        

        JTextField txtNCCname = new JTextField();
        txtNCCname.setEditable(false);

        JTextField txtNVid = new JTextField();
        txtNVid.setEditable(false);

        JTextField txtNVname = new JTextField();
        txtNVname.setEditable(false);

        JTextField txtTotal = new JTextField();
        txtTotal.setEditable(false);

        JTextArea txtNote = new JTextArea();
        txtNote.setWrapStyleWord(true);
        txtNote.setLineWrap(true);
        txtNote.setEditable(false);
        txtNote.setWrapStyleWord(true);
        txtNote.setLineWrap(true);
        JScrollPane scroll = new JScrollPane(txtNote);

        dtophieunhap pn = buspn.get(idOnClick);
        panel.add(new JLabel("Thông tin phiếu nhập"), "gapy 5 0");
        panel.add(txtPNid, "split 2, growx 0.5, wmin 100"); // Half width
        panel.add(txtDate, "growx"); // Full width
        txtPNid.setText(String.valueOf(idOnClick));
        txtDate.setText(String.valueOf(pn.getNgayNhap()));

        panel.add(new JLabel("Nhà cung cấp"), "gapy 5 0");
        panel.add(txtNCCid, "split 2, growx 0.5, wmin 100"); // Half width
        panel.add(txtNCCname, "growx"); // Full width
        int nccid = pn.getMaNhaCungCap();
        txtNCCid.setText(String.valueOf(nccid));
        txtNCCname.setText(String.valueOf(pn.getTenNCC(nccid)));

        panel.add(new JLabel("Nhân viên nhập hàng"), "gapy 5 0");
        panel.add(txtNVid, "split 2, growx 0.5, wmin 100"); // Half width
        panel.add(txtNVname, "growx"); // Full width
        int nvid = pn.getMaNhanVien();
        txtNVid.setText(String.valueOf(nvid));
        txtNVname.setText(String.valueOf(pn.getTenNV(nvid)));

        panel.add(new JLabel("Tổng tiền"), "gapy 5 0");
        panel.add(txtTotal); // Half width
        txtTotal.setText(String.valueOf(pn.getTongTien()));
        
        panel.add(new JLabel("Ghi chú"), "gapy 5 0");
        panel.add(scroll, "height 50,grow,pushy");
        txtNote.setText(String.valueOf(pn.getGhiChu()));

        panel.add(createDetailTable(pn.getMaPhieuNhap()));
        return panel;
    }
    
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                // Create a new JFrame
                JFrame frame = new JFrame();
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

                // Add the formphieunhap panel to the frame
                formphieunhap panel = new formphieunhap(2);

                frame.add(panel);

                // Set frame size and make it visible
                frame.setSize(1070, 741); // Adjust size as needed
                frame.setLocationRelativeTo(null); // Center the frame
                frame.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
